  /bookings/options:
    get:
      description: Returns available transport options for given coordinate. Start time can be defined, but is optional. If startTime is not provided, but required by the third party API, a default value of "Date.now()" is used. [from MaaS-API /listing]
      tags:
        - booking
      parameters:
        - name: from
          description: User's location in comma separated form e.g. 60.123,27.456 (lat/long, WGS84)
          in: query
          required: true
          schema:
            type: string
            pattern: ^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$
        - name: radius
          description: Maximum distance a user wants to travel to reach asset in metres, e.g. 500 metres
          in: query
          required: false
          schema:
            type: string
        - name: to
          description: A desired destination e.g. 60.123,27.456 (lat/long, WGS84)
          in: query
          required: false
          schema:
            type: string
            pattern: ^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$
        - name: share
          description: Defines if user can also share a ride
          in: query
          required: false
          schema:
            enum:
            - YES
            - NO
            
      responses:
        '200':
          description: Available transport methods matching the given query parameters. If no transport methods are available, an empty array is returned.
          content:
            application/json:
              schema:
                name: options
                type: array
                description: Available transport options for the queried TSP
                items:
                $ref: '#/components/schemas/options'
        '400':
          description: If coordinates given in the request are invalid the server returns
            400 Bad request as a response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
                
  /bookings/:
    get:
      description: Returns the `Booking` that has been created earlier
      tags:
        - booking
      parameters:
        - name: state
          description: The state of the booking to fetch
          in: query
          required: true
          schema:
            type: string
            enum: [BOOKED, CANCELLED, PAID, UPDATE-REQUESTED, UPDATED, STARTED, FINISHED]
      responses:
        '200':
          description: The bookings matching the query
          content:
            application/json:
              schema:
                type: array
                description: The bookings that matched the query (zero or more)
                minItems: 0
                items:
                  $ref: '#/components/schemas/booking'
        '400':
          description: Bad request (invalid query parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-serverless-endpoint: echo~GET
    post:
      description: Creates a new `Booking` for the TSP in **booked** state. The returned
        object will be a reference that is passed back & forth throughout the
        booking life cycle.
        The Booking may be modified in the response, e.g. location being
        adjusted for a more suitable pick-up location.
        In addition, the service may contain a **meta** attribute for arbitrary
        TSP metadata that the TSP needs later, and **token** attribute depicting
        how long the current state is valid.
      tags:
        - booking
      responses:
        '200':
          description: A new booking was succesfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/booking'
        '400':
          description: Bad request (invalid body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new-booking'
        description: New `Booking` data
        required: true
      parameters: []
  /bookings/{id}:
    get:
      description: Returns the `Bookings` that have been created through the system.
      tags:
        - booking
      parameters:
        - name: id
          in: path
          description: Booking identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The booking was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/booking'
        '400':
          description: Bad request (invalid query or body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: The booking was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      description: Modifies the state of a `Booking`, e.g. **cancels**, **pays** or
        **reschedules** it. The previous booking information is passed forward
        as-is for reference.
      tags:
        - booking
      parameters:
        - name: id
          in: path
          description: Booking identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The booking was modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/booking'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/booking'
        description: New `Booking` data
        required: true
  /free-asset-status:
    get:
      tags:
        - planning
      summary: describes asset availability
      description: describes assets that are available for use [free_bike_status in GBFS and amended] and returns pricing for requested leg
      
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/free-asset-status'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/free-asset-status'
        '400':
          description: bad input parameter
    parameters:
      - name: requested-leg-options
        in: query
        description: added to allow looking for specific asset requirements and return cost calculation by transport operator
        required: false
        schema:
          $ref: '#/components/schemas/options'
  /leg-summary/{id}:
    get:
      description: generates a summary of the specific leg
      tags:
        - trip execution
      parameters:
        - name: id
          in: path  
          description: Booking identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leg'
        '400':
          description: Bad request (invalid query or body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: The booking was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /monitor-trip/{id}:
    get:
      description: monitors the current location of the asset and duration & distance of the trip
      tags:
        - trip execution
      parameters:
        - name: id
          in: path  
          description: Booking identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitor'
        '400':
          description: Bad request (invalid query or body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: The booking was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /notification/{id}:
    get:
      description: notification between MaaS provider and Transport operator in case of user no-show or if specific asset is not available [addendum]
      tags: 
        - trip execution
      parameters:
        - name: id
          in: path  
          description: Booking identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: notifications available for given booking identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notification'
        '400':
          description: Bad request (invalid query or body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: The booking was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /provide-location/{id}:
    get:
      description: provides location of specific asset related to a booking
      tags:
        - trip execution
      parameters:
        - name: id
          in: path  
          description: Booking identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: asset location provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/coordinates'
        '400':
          description: Bad request (invalid query or body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: The booking was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /request-access/{id}:
    put:
      description: provides access to an asset or transport system
      tags:
        - trip execution
      parameters:
        - name: id
          in: path  
          description: Booking identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: access granted
        '400':
          description: Bad request (invalid query or body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: The booking was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /request-exit/{id}:
    put:
      description: provides exit from an asset or transport system
      tags:
        - trip execution
      parameters:
        - name: id
          in: path  
          description: Booking identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: exit granted
        '400':
          description: Bad request (invalid query or body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: The booking was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /request-pause/{id}:
    put:
      description: provides option to temporarily pause/park asset rental (in case lower fares are given for parked assets)
      tags:
        - trip execution
      parameters:
        - name: id
          in: path  
          description: Booking identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: pausing granted
        '400':
          description: Bad request (invalid query or body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: The booking was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /station-information:
    get:
      tags:
        - operator information
      summary: describes all available stations
      description: All stations contained in this list are considered public (ie, can be shown on a map for public use). If there are private stations (such as Capital Bikeshare’s White House station) these should not be exposed here and their status should not be included [from GBFS]
        
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/station-information'

            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/station-information'
        400:
          description: bad input parameter
  /support-request/{id}/{support-type}:
    put:
      description: identifies a request for support from user via MSP
      tags:
        - support
      parameters:
        - name: id
          in: path  
          description: Booking identifier
          required: true
          schema:
            type: string
        - name: support-type
          in: path
          description: type of support needed
          required: true
          schema:
            enum: [ BROKEN-DOWN, NOT-AT-LOCATION, NOT-CLEAN, NOT-AVAILABLE, UNABLE-TO-OPEN, UNABLE-TO-CLOSE, OTHER ]
      responses:
        '200':
          description: support request acknowledged
        '400':
          description: Bad request (invalid query or body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: The booking was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
                
  /support-status/{id}:
    get:
      description: identifies the current status of the support request
      tags:
        - support
      parameters:
        - name: id
          in: path  
          description: Booking identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: support status delivered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/support-status'
        '400':
          description: Bad request (invalid query or body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: The booking was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /system-alerts:
    get:
      tags:
      - operator information
      summary: informs customers about changes to the system outside of normal operations
      description: This feed is intended to inform customers about changes to the system that do not fall within the normal system operations. For example, system closures due to weather would be listed here, but a system that only operated for part of the year would have that schedule listed in the system-calendar.json feed. This file is an array of alert objects defined as below. Obsolete alerts should be removed so the client application can safely present to the end user everything present in the feed. The consumer could use the start/end information to determine if this is a past, ongoing or future alert and adjust the presentation accordingly. [from GBFS]
      
      responses:
        '200':
          description: returns currently active system alerts 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/system-alert'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/system-alert'
        '400':
          description: bad input parameter
  /system-calendar:
    get:
      tags:
        - operator information
      summary: describes the operating calendar for a system. An array of year objects defined as follows (if start/end year are omitted, then assume the start and end months do not change from year to year). [from GFBS]
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/system-calendar'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/system-calendar'
        400:
          description: bad input parameter
  /system-hours:
    get:
      tags:
        - operator information
      summary: describes the system hours of operation
      description: Describes the hours of operation of all available systems of the transport operator [from GBFS]
      
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/system-hours'
                
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/system-hours'
        '400':
          description: bad input parameter
  /system-information:
    get:
      tags:
      
        - operator information
      summary: describes the system
      description: Describes the system including System operator, System location, year implemented, URLs, contact info, time zone. [from GBFS]
      
      responses:
              200:
                description: successful operation
                content:
                  application/json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/system-information'
                    example:
                      system-id: XXTO0001
                      language: eng
                      name: FreeBike
                      timezone: IST
                      type-of-system: free-floating
                  application/xml:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/system-information'
                    example:
                      system-id: NLTO0001
                      language: eng
                      name: FreeBike
                      timezone: IST
                      type-of-system: free-floating  
              400:
                description: bad input parameter
  /system-pricingplans:
    get:
      tags:
       - operator information
      summary: gives pricing information
      description: Describes pricing of systems or assets [from GBFS]
       
      responses:
        '200':
          description: returns standard pricing plans for an operator
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/system-pricing-plan'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/system-pricing-plan'
        '400':
          description: bad input parameter
  /system-regions:
    get:
      tags:
        - operator information
      summary: describes regions for a system that is broken up by geographic or political region. It is defined as a separate feed to allow for additional region metadata (such as shape definitions). [from GBFS]
      
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/system-region'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/system-region'
        400:
          description: bad input parameter          
